<EditForm Model="Person" OnValidSubmit="OnValidSubmit">
    <DataAnnotationsValidator />
    <div class="mb-3 row">
        <label class="form-label" >Name</label>
        <div>
            <InputText class="form-control" @bind-Value="Person.Name" />
            <ValidationMessage For="@(() => Person.Name)" />
        </div>        
    </div>
    <div class="mb-3 row">
        <label class="form-label" >Date of Birth</label>
        <div>
            <InputDate class="form-control" @bind-Value="Person.DateOfBirth" />
            <ValidationMessage For="@(() => Person.DateOfBirth)" />
        </div>        
    </div>
    <div class="mb-3 row">
        <div class="form-markdown">
                <InputMarkdown @bind-Value="Person.Biography" Label="Biography" For="@(() => Person.Biography)" />
        </div>
    </div>
    <div class="mb-3 row">
        <InputImg Label="Picture" OnSelectedImage="PictureSelected" ImageUrl="@imageUrl" />
    </div>
    
    <button class="btn btn-success" type="submit">Save changes</button>
</EditForm>

@code {
    [Parameter] public Person Person { get; set; } 
    [Parameter] public EventCallback OnValidSubmit { get; set; }
    string imageUrl;

    protected override void OnInitialized()
    {
        //make Person.Picture null so when its not updated, its not sent to the API ==> less trafic
        if (!string.IsNullOrEmpty(Person.Picture))
        {
            imageUrl = Person.Picture;
            Person.Picture = null;
        }
    }

    private void PictureSelected(string imageBase64)
    {
        Person.Picture = imageBase64;
        imageUrl = null;
    }
}
