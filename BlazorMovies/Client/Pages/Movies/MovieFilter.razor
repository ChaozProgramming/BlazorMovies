@page "/movies/search"
@inject IMovieRepository movieRepository
@inject IGenreRepository genreRepository
@inject NavigationManager navigationManager


<h3>Movie Search</h3>
<EditForm Model="movieFilterDTO" >
<div class="row g-3">
    <div class="col-auto">
        <label class="visually-hidden" for="title">Title</label>
        <input type="text" class="form-control" id="title" placeholder="Movie Title" 
        @bind-value="movieFilterDTO.Title" @bind-value:event="oninput"
        @onkeypress="@((KeyboardEventArgs e) => TitleKeyPress(e))"
        />
    </div>
    <div class="col-auto">
        <label class="visually-hidden" for="genre">Genre</label>
        <select class="form-control" id="genre" @bind="movieFilterDTO.GenreId">
            <option value = "0">
                --Select a Genre
            </option>
            @foreach(var genre in Genres)
            {
                <option value=@genre.Id>@genre.Name</option>
            }
        </select>
    </div>
    <div class="col-auto">
        <input type="checkbox" class="form-check-input" id="upcomingReleases" @bind="movieFilterDTO.UpcomingReleases" />
        <label class="form-check-label" for="upcomingReleases">
            Upcoming Releases
        </label>
    </div>
    <div class="col-auto">
        <input type="checkbox" class="form-check-input" id="upcomingReleases" @bind="movieFilterDTO.InTheaters" />
        <label class="form-check-label" for="upcomingReleases">
            In Theaters
        </label>
    </div>

    <button type="button" class="btn btn-primary mb-2 col-auto mx-sm-3" @onclick="SearchForMovies">Filter</button>
    <button type="button" class="btn alert-danger mb-2 col-auto" @onclick="Clear">Clear</button>
</div>
</EditForm>

<MoviesList Movies="Movies"></MoviesList>

<Pagination CurrentPage="movieFilterDTO.Page" TotalAmountPages="totalAmountPages" SelectedPage="SelectedPage" />

@code {
    //bind - default event is onchange
    //bind-value change default event
    private List<Movie> Movies;
    private MovieFilterDTO movieFilterDTO = new MovieFilterDTO();
    public List<Genre> Genres = new List<Genre>();
    private int totalAmountPages;

    protected async override Task OnInitializedAsync()
    {
        var queryStrings = navigationManager.GetQueryStrings(navigationManager.Uri);
        Genres = await genreRepository.GetGenres();

        if (queryStrings != null)
        {
            FillFilterWithQueryStrings(queryStrings);
        }

        await LoadMovies();
    }

    private void FillFilterWithQueryStrings(Dictionary<string, string> queryStrings)
    {
        if (queryStrings.ContainsKey("genreId"))
        {
            movieFilterDTO.GenreId = int.Parse(queryStrings["genreId"]);
        }

        if (queryStrings.ContainsKey("title"))
        {
            movieFilterDTO.Title = queryStrings["title"];
        }

        if (queryStrings.ContainsKey("intheaters"))
        {
            movieFilterDTO.UpcomingReleases = bool.Parse(queryStrings["intheaters"]);
        }

        if (queryStrings.ContainsKey("upcomingReleases"))
        {
            movieFilterDTO.UpcomingReleases = bool.Parse(queryStrings["upcomingReleases"]);
        }

        if (queryStrings.ContainsKey("page"))
        {
            movieFilterDTO.Page = int.Parse(queryStrings["page"]);
        }
    }

    private async Task LoadMovies()
    {
        var queryString = GenerateQueryString();
        if (!string.IsNullOrWhiteSpace(queryString))
        {
            queryString = $"?{queryString}";
            navigationManager.NavigateTo("movies/search" + queryString);
        }

        var paginatedResponse = await movieRepository.GetMoviesFiltered(movieFilterDTO);
        Movies = paginatedResponse.Response;
        totalAmountPages = paginatedResponse.TotalAmountPages;
    }

    private async Task SelectedPage(int page)
    {
        movieFilterDTO.Page = page;
        await LoadMovies();
    }

    private string GenerateQueryString()
    {
        var queryStringsDict = new Dictionary<string, string>();
        queryStringsDict["genreId"] = movieFilterDTO.GenreId.ToString();
        queryStringsDict["title"] = movieFilterDTO.Title ?? "";
        queryStringsDict["intheaters"] = movieFilterDTO.InTheaters.ToString();
        queryStringsDict["upcomingReleases"] = movieFilterDTO.UpcomingReleases.ToString();
        queryStringsDict["page"] = movieFilterDTO.Page.ToString();

        var defaultValue = new List<string>() { "false", "", "0" };

        // genreId=4&title=spider....

        return string.Join("&", queryStringsDict
            .Where(x => !defaultValue.Contains(x.Value.ToLower()))
            .Select(x => $"{x.Key}={System.Web.HttpUtility.UrlEncode(x.Value)}").ToArray());

    }

    private async Task SearchForMovies()
    {
        await LoadMovies();
    }

    private async Task Clear()
    {
        movieFilterDTO.Title = "";
        movieFilterDTO.GenreId = 0;
        movieFilterDTO.InTheaters = false;
        movieFilterDTO.UpcomingReleases = false;
        await LoadMovies();
    }

    private async Task TitleKeyPress(KeyboardEventArgs e)
    {
        if (e.Key == "Enter")
        {
            await SearchForMovies();
        }
    }
}

