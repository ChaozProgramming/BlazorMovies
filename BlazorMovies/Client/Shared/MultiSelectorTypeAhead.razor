@typeparam T

<TypeAhead  SearchMethod="@((string searchText) => SearchMethod(searchText))"
            ValueChanged="@((T item) => SelectedElement(item))">
    <ResultTemplate>
        @ResultTemplate(context) @*Context is the item that is used - person, actor, ...*@
    </ResultTemplate>
</TypeAhead>

<ul>
    @foreach(var item in SelectedElements)
    {
        <li draggable="true"
            @ondragstart="@(() => HandleDragStart(item))"
            @ondragover="@(() => HandleDragOver(item))"
            class="list-group-item list-group-item-action">
            @ListTemplate(item)
            <span @onclick="@(()=> SelectedElements.Remove(item))" 
                    class="badge btn-primary rounded-pill"
                    style="cursor: pointer">X</span>
        </li>
    }
</ul>

@code {
    [Parameter] public List<T> SelectedElements { get; set; } = new List<T>();
    [Parameter] public Func<string, Task<IEnumerable<T>>> SearchMethod { get; set; }
    [Parameter] public RenderFragment<T> ResultTemplate { get; set; }
    [Parameter] public RenderFragment<T> ListTemplate { get; set; }
    T draggedItem;

    private void SelectedElement(T item)
    {
        //if the item we are selecting is not allready in the selected items
        if (!SelectedElements.Any(x => x.Equals(item)))
        {
            SelectedElements.Add(item);
        }

    }

    private void HandleDragStart(T item)
    {
        draggedItem = item;
    }

    private void HandleDragOver(T item)
    {
        if (!item.Equals(draggedItem))
        {
            var dragElementIndex = SelectedElements.IndexOf(draggedItem);
            var elementIndex = SelectedElements.IndexOf(item);
            SelectedElements[elementIndex] = draggedItem;
            SelectedElements[dragElementIndex] = item;

        }

    }
}
